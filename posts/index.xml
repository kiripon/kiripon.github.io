<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 自由研究帳</title><link>https://kiripon.net/posts/</link><description>Recent content in Posts on 自由研究帳</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 23 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://kiripon.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Chrome を使って Unity 上で音声認識</title><link>https://kiripon.net/posts/2015-08-23-voicerecognitionwithunity/</link><pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2015-08-23-voicerecognitionwithunity/</guid><description>概要 Google Voice Recognition API を利用して音声認識を行ったメモ. 構成 Websocket-sharp Unity 使い方 適当な Unity オブジェクトに以下のスクリプトをアタッチする. http://localhost:12002 をChrome でひらく マイクに話しかけるとUn</description></item><item><title>Lambek's theorem</title><link>https://kiripon.net/posts/2015-08-23-lambeks-theorem/</link><pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2015-08-23-lambeks-theorem/</guid><description>$C :$ 圏 $F : C \rightarrow C$ (自己函手) 定理 Lambek's theorem $F$ が initial algebra $$\alpha : F(X) \rightarrow X$$を持つとき, $\alpha$ は $X$ と $F(X)$ の isomorphism に なる 証明 $F(\alpha): F(F(X)) \rightarrow F(X)$ は $F(X)$ を carrier とすると algebra になる. $\alpha$ が initial であることより、以下の図を</description></item><item><title>Arch Linux を Dell XPS 13(2015)へインストールする</title><link>https://kiripon.net/posts/2015-03-17-install-archlinux-to-xps13/</link><pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2015-03-17-install-archlinux-to-xps13/</guid><description>経緯 Dell XPS 13を購入した.(とてもうれしい) 早速Arch Linux をインストールすることにしたが、配布されている ISO イメージでは，無線LANが認識されなかった． そのためドラ</description></item><item><title>OpenGL in Haskell</title><link>https://kiripon.net/posts/2014-12-04-opengl-in-haskell/</link><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-12-04-opengl-in-haskell/</guid><description>haskellでOpenGLを使って何かしたい、と思って opengl-tutorial.orgを参考にhaddockを眺めながら書きました。haskellのOp</description></item><item><title>圏論のノート2:Functor</title><link>https://kiripon.net/posts/2014-10-29-category-functor/</link><pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-10-29-category-functor/</guid><description>Haskellではもっぱらコンテナを表すのに使われるFunctorについて。 定義:Functor $C$と$D$を圏とする。 $F:C \rightarrow D$について,以下を満たす/表す時</description></item><item><title>圏論のノート1</title><link>https://kiripon.net/posts/2014-10-19-category1/</link><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-10-19-category1/</guid><description>定義: 圏 圏$C$ は以下の要素からなる object(対象) の集まり arrow(射) の集まり(morphismとも呼ばれる) arrow $f$ にdomainとcodomainを割</description></item><item><title>Type safe Formatting</title><link>https://kiripon.net/posts/2014-10-05-type-safe-formatting/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-10-05-type-safe-formatting/</guid><description>めも Type-safe functional formatted IO を読んだ際のメモ.型でラムダ式っぽい事ができるのは便利。gadtの証人の型を作るのに役立ちそう 要約 printfやscanfのフォーマット文字列を実装</description></item><item><title>Github pages に移動しました</title><link>https://kiripon.net/posts/2014-09-27-github-pages/</link><pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-09-27-github-pages/</guid><description>試験的にブログをGithub pagesで管理することにしました。 試行錯誤中です。 -- test input main = do x &amp;lt;- getLine putStrLn $ x ++ &amp;#34;hogehoge&amp;#34; piyo n = foldr (*) 1 [1..20]</description></item><item><title>Segment Tree</title><link>https://kiripon.net/posts/2015-08-26-segment-tree/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2015-08-26-segment-tree/</guid><description>Segment Tree モノイド $(M,\ast,e)$ $a_1,..,a_n \in M$ に対して,以下のことがそれぞれ $O(log(n))$ で行えるデータ構造 $a_i \ast a_{i+1} \ast \dots \ast a_k$ を求める $a_i$ の書き換え Verification AOJを用いて実装の正しさを確認した. DSL-2-A Range Minimum Query DSL-2-B Range Sum Query</description></item><item><title>ICPCの罪状</title><link>https://kiripon.net/posts/2014-07-14-guilt-icpc/</link><pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-07-14-guilt-icpc/</guid><description>今年もicpcに参加しました。 去年よりも解いた問題数は増えたものの、僕が書いたBがバグってて同期にデバッグの手間を取らせたり、Eの解法が思いついたもののコードを</description></item><item><title>Haskellで最短経路</title><link>https://kiripon.net/posts/2014-07-02-shortest-path-in-haskell/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-07-02-shortest-path-in-haskell/</guid><description>#Haskellでダイクストラ法を書く 最近Dijkstra法を教える機会があったので、せっかくなのでHaskellでも書きました。 containersにPrio</description></item><item><title>Data types a la carteのメモ2</title><link>https://kiripon.net/posts/2014-06-24-data-types-a-la-carte2/</link><pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-06-24-data-types-a-la-carte2/</guid><description>データ型の定義はできるようになったので、このデータ型を評価していく。 数式の評価とはなにか。各項についての畳込みのことである。 畳み込みというとリストに限定して考え</description></item><item><title>Data types a la carte のメモ</title><link>https://kiripon.net/posts/2014-06-07-data-types-a-la-carte1/</link><pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-06-07-data-types-a-la-carte1/</guid><description>以下の論文を読んだ内容を自分なりにまとめたメモ. 文章は適当なので後で書き直すかもしれない. Data Types a la carte 目標：数式の木をつくる。 数式の木をつくる。この時に木を直接書</description></item><item><title>Data.Sequence と View Pattern</title><link>https://kiripon.net/posts/2014-01-05-data-sequence-view-pattern/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://kiripon.net/posts/2014-01-05-data-sequence-view-pattern/</guid><description>C++のdequeに対応するモジュールとして、haskellでは純粋な関数の中で使えるData.Sequenceというモジュールがあります。 内部でFinger T</description></item></channel></rss>