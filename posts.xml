<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>自由研究帳</title>
        <link>http://kiripon.net</link>
        <description><![CDATA[Haskellや読んだ論文のまとめ]]></description>
        <atom:link href="http://kiripon.net/posts.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 26 Aug 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Segment Tree</title>
    <link>http://kiripon.net/posts/2015-08-26-Segment-Tree.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on August 26, 2015
    
</div>
<div class="info">
  
  Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/Data%20Structures.html">Data Structures</a>
  
</div>

<h2 id="segment-tree">Segment Tree</h2>
<ul>
<li>モノイド <span class="math inline">\((M,\ast,e)\)</span></li>
<li><span class="math inline">\(a_1,..,a_n \in M\)</span></li>
</ul>
<p>に対して,以下のことがそれぞれ <span class="math inline">\(O(log(n))\)</span> で行えるデータ構造 * <span class="math inline">\(a_i \ast a_{i+1} \ast \dots \ast a_k\)</span> を求める * <span class="math inline">\(a_i\)</span> の書き換え</p>
<h2 id="verification">Verification</h2>
<p>AOJを用いて実装の正しさを確認した.</p>
<ul>
<li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_A">DSL-2-A Range Minimum Query</a></li>
<li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_B">DSL-2-B Range Sum Query</a></li>
</ul>
<h2 id="実装">実装</h2>
<p>Segment Tree は配列を使った破壊的な実装がよく知られている。 しかし今回はHaskellで実装をおこなうために、副作用を用いない永続データ 構造として実装した。</p>
<h2 id="コード">コード</h2>
<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_B">Range Sum Query</a> でverifyしたときのものを載せる</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# OPTIONS_GHC -O2 -funbox-strict-fields #-}</span>
<span class="ot">{-# LANGUAGE BangPatterns #-}</span>
<span class="ot">{-# LANGUAGE ViewPatterns #-}</span>
<span class="ot">{-# LANGUAGE UnboxedTuples #-}</span>
<span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span>
<span class="kw">import </span><span class="dt">Data.Int</span> (<span class="dt">Int32</span>)
<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Control.Applicative</span>
<span class="kw">import </span><span class="dt">Data.Monoid</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span> (fromJust)
<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">B8</span>
<span class="ot">getInts ::</span> <span class="dt">IO</span> [<span class="dt">Int</span>]
getInts <span class="fu">=</span>  map (fst <span class="fu">.</span> fromJust <span class="fu">.</span> B8.readInt) <span class="fu">.</span> B8.words <span class="fu">&lt;$&gt;</span> B8.getLine

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  n<span class="fu">:</span>q<span class="fu">:</span>_ <span class="ot">&lt;-</span> getInts
  <span class="kw">let</span> bst <span class="fu">=</span> fromList <span class="fu">$</span> replicate n<span class="ot"> mempty ::</span> <span class="dt">STree</span> (<span class="dt">Sum</span> <span class="dt">Int</span>)
  loop bst q
  return ()
  <span class="kw">where</span>
    loop _ <span class="dv">0</span> <span class="fu">=</span> return ()
    loop <span class="fu">!</span>tree <span class="fu">!</span>cnt <span class="fu">=</span> <span class="kw">do</span>
      q<span class="fu">:</span>x<span class="fu">:</span>y<span class="fu">:</span>_ <span class="ot">&lt;-</span> getInts
      <span class="kw">if</span> q <span class="fu">==</span> <span class="dv">0</span>
        <span class="kw">then</span> <span class="kw">do</span>
        <span class="kw">let</span> tree' <span class="fu">=</span> update (mappend <span class="fu">$</span> fromIntegral y) x tree
        loop tree' (cnt<span class="fu">-</span><span class="dv">1</span>)
        <span class="kw">else</span> <span class="kw">do</span>
        print <span class="fu">.</span> getSum <span class="fu">$</span> query (x,y) tree
        loop tree (cnt<span class="fu">-</span><span class="dv">1</span>)

<span class="fu">---------------------------------------------</span>
<span class="fu">---</span> <span class="dt">Monoid</span> <span class="kw">instance</span> for range minimum<span class="fu">/</span>maximum query
<span class="kw">newtype</span> <span class="dt">Min</span> <span class="fu">=</span> <span class="dt">Min</span> {<span class="ot">fromMin ::</span> <span class="dt">Int32</span> } <span class="kw">deriving</span> (<span class="dt">Ord</span>,<span class="dt">Show</span>,<span class="dt">Eq</span>,<span class="dt">Read</span>)
<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Min</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">Min</span> maxBound
  <span class="ot">{-# INLINE mempty #-}</span>
  mappend <span class="fu">=</span> min
  <span class="ot">{-# INLINE mappend #-}</span>

<span class="kw">newtype</span> <span class="dt">Max</span> <span class="fu">=</span> <span class="dt">Max</span> <span class="dt">Int</span> <span class="kw">deriving</span> (<span class="dt">Ord</span>,<span class="dt">Show</span>,<span class="dt">Eq</span>)
<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Max</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">Max</span> minBound
  <span class="ot">{-# INLINE mempty #-}</span>
  mappend <span class="fu">=</span> max
  <span class="ot">{-# INLINE mappend #-}</span>

<span class="fu">---------------------</span>
<span class="fu">---</span> <span class="dt">Segment</span> <span class="dt">Tree</span>
<span class="kw">data</span> <span class="dt">STree</span> v <span class="fu">=</span> <span class="dt">Leaf</span> <span class="ot">{-# UNPACK #-}</span><span class="fu">!</span><span class="dt">Int</span> <span class="fu">!</span>v
             <span class="fu">|</span> <span class="dt">Branch</span> <span class="ot">{-# UNPACK #-}</span><span class="fu">!</span>(<span class="dt">Int</span>,<span class="dt">Int</span>) <span class="fu">!</span>v <span class="fu">!</span>(<span class="dt">STree</span> v) <span class="fu">!</span>(<span class="dt">STree</span> v)
             <span class="kw">deriving</span> (<span class="dt">Show</span>)
<span class="co">-- | make segment tree from [a_1 .. a_n] (1-based indexing)</span>
<span class="ot">fromList ::</span> <span class="dt">Monoid</span> v <span class="ot">=&gt;</span> [v] <span class="ot">-&gt;</span> <span class="dt">STree</span> v
fromList <span class="fu">!</span>xs <span class="fu">=</span> makeTree (<span class="dv">1</span>,(length xs)) xs
<span class="ot">{-# INLINE fromList #-}</span>

<span class="co">-- | make segment tree from [a_k .. a_l]</span>
<span class="ot">makeTree ::</span> <span class="dt">Monoid</span> v <span class="ot">=&gt;</span> (<span class="dt">Int</span>,<span class="dt">Int</span>) <span class="ot">-&gt;</span> [v] <span class="ot">-&gt;</span> <span class="dt">STree</span> v
makeTree _ <span class="fu">!</span>[] <span class="fu">=</span> error <span class="st">&quot;empty list&quot;</span>
makeTree (k,l) <span class="fu">!</span>es <span class="fu">=</span> loop <span class="fu">$</span> map (uncurry f) (zip [k<span class="fu">..</span>l] es)
  <span class="kw">where</span>
    loop <span class="fu">!</span>[x] <span class="fu">=</span> x
    loop <span class="fu">!</span>xs <span class="fu">=</span> loop <span class="fu">$</span> buildTree xs
<span class="ot">    f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">STree</span> v
    f <span class="fu">!</span>ix <span class="fu">!</span>v <span class="fu">=</span> <span class="dt">Leaf</span> ix v
    buildTree <span class="fu">!</span>(a<span class="fu">:</span>b<span class="fu">:</span>ys) <span class="fu">=</span> <span class="kw">let</span> v <span class="fu">=</span> val a <span class="ot">`mappend`</span> val b
                          <span class="kw">in</span> <span class="dt">Branch</span> (left a,right b) v a b <span class="fu">:</span> buildTree ys
    buildTree <span class="fu">!</span>x <span class="fu">=</span> x

range<span class="ot"> ::</span> <span class="dt">STree</span> v<span class="ot">-&gt;</span> (<span class="dt">Int</span>,<span class="dt">Int</span>)
range <span class="fu">!</span>(<span class="dt">Leaf</span> r _) <span class="fu">=</span> (r,r)
range <span class="fu">!</span>(<span class="dt">Branch</span> r _ _ _) <span class="fu">=</span> r
<span class="ot">{-# INLINE range #-}</span>

<span class="ot">val ::</span> <span class="dt">STree</span> v <span class="ot">-&gt;</span> v
val <span class="fu">!</span>(<span class="dt">Leaf</span> _ v) <span class="fu">=</span> v
val <span class="fu">!</span>(<span class="dt">Branch</span> _ v _ _) <span class="fu">=</span> v
<span class="ot">{-# INLINE val #-}</span>

left,<span class="ot">right ::</span> <span class="dt">STree</span> v <span class="ot">-&gt;</span> <span class="dt">Int</span>
left (Main.range <span class="ot">-&gt;</span> (l,_))  <span class="fu">=</span> l
right (Main.range <span class="ot">-&gt;</span> (_,r)) <span class="fu">=</span> r
<span class="ot">{-#INLINE left  #-}</span>
<span class="ot">{-#INLINE right #-}</span>

<span class="co">-- | @query (l,r) t@ calculates @a_i &lt;&gt; .. &lt;&gt; a_r@. (@(&lt;&gt;)@ is equal to @mappend@)</span>
<span class="co">-- O(log(n))</span>
<span class="ot">query ::</span> <span class="dt">Monoid</span> v <span class="ot">=&gt;</span>  (<span class="dt">Int</span>, <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">STree</span> v <span class="ot">-&gt;</span> v
query (ls,rs) t <span class="fu">=</span> loop t
  <span class="kw">where</span>
    loop (<span class="dt">Leaf</span> ix v)
      <span class="fu">=</span> <span class="kw">if</span> ls <span class="fu">&lt;=</span> ix <span class="fu">&amp;&amp;</span> ix <span class="fu">&lt;=</span> rs <span class="kw">then</span> v <span class="kw">else</span> mempty
    loop (<span class="dt">Branch</span> (leftist,rightist) v lt rt)
      <span class="fu">|</span> rightist <span class="fu">&lt;</span> ls <span class="fu">||</span> rs <span class="fu">&lt;</span> leftist <span class="fu">=</span> mempty
      <span class="fu">|</span> ls <span class="fu">&lt;=</span> leftist <span class="fu">&amp;&amp;</span> rightist <span class="fu">&lt;=</span> rs <span class="fu">=</span> v
       <span class="fu">|</span> otherwise <span class="fu">=</span> loop lt <span class="ot">`mappend`</span> loop rt
<span class="ot">{-# SPECIALIZE query :: (Int,Int) -&gt; STree (Sum Int) -&gt; Sum Int #-}</span>

<span class="co">-- | @update f ix tree@ makes tree whose @ix@-th element is updated by @f@.</span>
<span class="co">-- O(log(n))</span>
<span class="ot">update ::</span> <span class="dt">Monoid</span> v <span class="ot">=&gt;</span> (v <span class="ot">-&gt;</span> v) <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">STree</span> v <span class="ot">-&gt;</span> <span class="dt">STree</span> v
update f <span class="fu">!</span>ix <span class="fu">!</span>tree <span class="fu">=</span> loop tree
  <span class="kw">where</span> loop t <span class="fu">=</span> <span class="kw">case</span> t <span class="kw">of</span>
          <span class="dt">Leaf</span> i v <span class="ot">-&gt;</span> <span class="kw">if</span> ix <span class="fu">==</span> i
                      <span class="kw">then</span> <span class="dt">Leaf</span> i (f v)
                      <span class="kw">else</span> tree
          <span class="dt">Branch</span> rng _ l<span class="fu">@</span>(Main.range <span class="ot">-&gt;</span> (ll,lr)) r
            <span class="fu">|</span> ll <span class="fu">&lt;=</span> ix <span class="fu">&amp;&amp;</span> ix <span class="fu">&lt;=</span> lr
              <span class="ot">-&gt;</span> <span class="kw">let</span> l' <span class="fu">=</span> loop l
                 <span class="kw">in</span> <span class="dt">Branch</span> rng (val l' <span class="ot">`mappend`</span> val r) l' r
            <span class="fu">|</span> otherwise
              <span class="ot">-&gt;</span> <span class="kw">let</span> r' <span class="fu">=</span> loop r
                 <span class="kw">in</span> <span class="dt">Branch</span> rng (val l <span class="ot">`mappend`</span> val r') l r'
<span class="co">-- | @add v ix tree@ is equal to @update (mappend v) ix tree.@</span>
<span class="ot">add ::</span> <span class="dt">Monoid</span> v <span class="ot">=&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">STree</span> v <span class="ot">-&gt;</span> <span class="dt">STree</span> v
add <span class="fu">!</span>v <span class="fu">!</span>ix <span class="fu">!</span>tree <span class="fu">=</span> loop tree
  <span class="kw">where</span> loop t <span class="fu">=</span> <span class="kw">case</span> t <span class="kw">of</span>
          <span class="dt">Leaf</span> i v0 <span class="ot">-&gt;</span> <span class="kw">if</span> ix <span class="fu">==</span> i
                      <span class="kw">then</span> <span class="dt">Leaf</span> i (v <span class="ot">`mappend`</span> v0)
                      <span class="kw">else</span> tree
          <span class="dt">Branch</span> rng _ l<span class="fu">@</span>(Main.range <span class="ot">-&gt;</span> (ll,lr)) r
            <span class="fu">|</span> ll <span class="fu">&lt;=</span> ix <span class="fu">&amp;&amp;</span> ix <span class="fu">&lt;=</span> lr
              <span class="ot">-&gt;</span> <span class="kw">let</span> l' <span class="fu">=</span> loop l
                 <span class="kw">in</span> <span class="dt">Branch</span> rng (val l' <span class="ot">`mappend`</span> val r) l' r
            <span class="fu">|</span> otherwise
              <span class="ot">-&gt;</span> <span class="kw">let</span> r' <span class="fu">=</span> loop r
                 <span class="kw">in</span> <span class="dt">Branch</span> rng (val l <span class="ot">`mappend`</span> val r') l r'

<span class="co">-- | @insert ix v tree@ makes tree whose @ix@-th element is replaced by @v@.</span>
<span class="co">-- O(log(n))</span>
<span class="ot">insert ::</span> <span class="dt">Monoid</span> v <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">STree</span> v <span class="ot">-&gt;</span> <span class="dt">STree</span> v
insert <span class="fu">!</span>ix <span class="fu">!</span>v <span class="fu">!</span>tree <span class="fu">=</span> loop tree
  <span class="kw">where</span> loop t <span class="fu">=</span> <span class="kw">case</span> t <span class="kw">of</span>
          <span class="dt">Leaf</span> i _ <span class="ot">-&gt;</span> <span class="kw">if</span> ix <span class="fu">==</span> i
                      <span class="kw">then</span> <span class="dt">Leaf</span> i v
                      <span class="kw">else</span> tree
          <span class="dt">Branch</span> rng _ l<span class="fu">@</span>(Main.range <span class="ot">-&gt;</span> (ll,lr)) r
            <span class="fu">|</span> ll <span class="fu">&lt;=</span> ix <span class="fu">&amp;&amp;</span> ix <span class="fu">&lt;=</span> lr
              <span class="ot">-&gt;</span> <span class="kw">let</span> l' <span class="fu">=</span> loop l
                 <span class="kw">in</span> <span class="dt">Branch</span> rng (val l' <span class="ot">`mappend`</span> val r) l' r
            <span class="fu">|</span> otherwise
              <span class="ot">-&gt;</span> <span class="kw">let</span> r' <span class="fu">=</span> loop r
                 <span class="kw">in</span> <span class="dt">Branch</span> rng (val l <span class="ot">`mappend`</span> val r') l r'</code></pre></div>
<h2 id="補足">補足</h2>
<p>仮定をモノイドから群に強めることで, 実装がより単純なデータ構造である Binary indexed tree を作ることができる.</p>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Wed, 26 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2015-08-26-Segment-Tree.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>Chrome を使って Unity 上で音声認識</title>
    <link>http://kiripon.net/posts/2015-08-23-VoiceRecognitionWithUnity.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on August 23, 2015
    
</div>
<div class="info">
  
  Tags: <a href="/tags/C%23.html">C#</a>, <a href="/tags/Unity.html">Unity</a>
  
</div>

<h2 id="構成">構成</h2>
<ul>
<li>Websocket-sharp</li>
<li>Unity</li>
</ul>
<h2 id="使い方">使い方</h2>
<ol>
<li>適当なオブジェクトに以下のスクリプトをあたっちする.</li>
<li><a href="http://localhost:12002" class="uri">http://localhost:12002</a> をChrome でひらく</li>
<li>マイクに話しかけるとUnity上のデバッグコンソールに認識したメッセージが表示される</li>
</ol>
<pre><code>using UnityEngine;
using System;
using System.Collections;
using System.Configuration;
using WebSocketSharp;
using WebSocketSharp.Net;
using System.Text;
using WebSocketSharp.Server;
using System.Security.Cryptography.X509Certificates;
public class chromeVoiceRecog : MonoBehaviour {
  private HttpServer httpsv;
  public class MyService : WebSocketBehavior{
    public MyService(){
      base.IgnoreExtensions = true;
    }
    protected override void OnMessage (MessageEventArgs e)
    {
      // Get
      Debug.Log (&quot;Get message:&quot; + e.Data);
    }
    protected override void OnOpen(){
      Debug.Log (&quot;Socket Open&quot;);
    }
    protected override void OnError(ErrorEventArgs e){
      Debug.Log (&quot;Error:&quot; + e.Message);
      Debug.Log (&quot;Exception:&quot; + e.Exception);
      Debug.Log (&quot;hoge&quot; + e.Exception.StackTrace);
    }
  }
  void Awake()
  {
    var port = 12002;
    var addr = &quot;localhost&quot;;
    var fullUrl = addr + &quot;:&quot; + port;
    httpsv = new HttpServer (&quot;http://&quot; + fullUrl);
    httpsv.RootPath = &quot;./htmlcontents&quot;; // TODO: まともなパスに書き換える
    string[] fs = System.IO.Directory.GetFiles (@httpsv.RootPath, &quot;*&quot; );
    Debug.Log (&quot;current path:&quot; + fs[0]);
    httpsv.Log.Level = LogLevel.Trace;
    httpsv.OnGet += (sender, e) =&gt; {
      var req = e.Request;
      var res = e.Response;
      var path = req.RawUrl;
      Debug.Log(&quot;http request:&quot;+req);
      if(path == &quot;/&quot;) path += &quot;index.html&quot;;
      var content = httpsv.GetFile(path);
      if(content == null){
        res.StatusCode = (int)HttpStatusCode.NotFound;
        res.WriteContent(
          System.Text.Encoding.UTF8.GetBytes(
          &quot;File Not Found&quot;));
        return;
      }
      if(path.EndsWith (&quot;.html&quot;)){
        res.ContentType = &quot;text/html&quot;;
        res.ContentEncoding = Encoding.UTF8;
      }
      res.WriteContent(content);
    };
    httpsv.WaitTime = TimeSpan.FromSeconds (2);
    httpsv.AddWebSocketService&lt;MyService&gt; (&quot;/MyService&quot;);
    httpsv.Start ();
    Debug.Log (&quot;http server started with &quot; + fullUrl);
  }
  void OnApplicationQuit()
  {
    httpsv.Stop ();
    Debug.Log (&quot;websocket server exitted&quot;);
  }
}
</code></pre>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Sun, 23 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2015-08-23-VoiceRecognitionWithUnity.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>Lambek's theorem</title>
    <link>http://kiripon.net/posts/2015-08-23-Lambek%27s-Theorem.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on August 23, 2015
    
</div>
<div class="info">
  
  Tags: <a href="/tags/Category.html">Category</a>, <a href="/tags/%E5%9C%8F%E8%AB%96.html">圏論</a>
  
</div>

<ul>
<li><span class="math inline">\(C :\)</span> 圏</li>
<li><span class="math inline">\(F : C \rightarrow C\)</span> (自己函手)</li>
</ul>
<h3 id="定理-lambeks-theorem">定理 Lambek’s theorem</h3>
<p><span class="math inline">\(F\)</span> が initial algebra <span class="math display">\[\alpha : F(X)
\rightarrow X\]</span>を持つとき, <span class="math inline">\(\alpha\)</span> は <span class="math inline">\(X\)</span> と <span class="math inline">\(F(X)\)</span> の isomorphism に なる</p>
<h3 id="証明">証明</h3>
<p><span class="math inline">\(F(\alpha): F(F(X)) \rightarrow F(X)\)</span> は <span class="math inline">\(F(X)\)</span> を carrier とすると algebra になる. <span class="math inline">\(\alpha\)</span> が initial であることより、以下の図を可換にする <span class="math inline">\(i : X \rightarrow F(X)\)</span> が唯一存在する. (<span class="math inline">\(\alpha\)</span> から <span class="math inline">\(F(\alpha)\)</span> へ algebra を移す射)</p>
<p><span class="math display">\[
\require{AMScd}
\begin{CD}
F(X)         @&gt;{F(i)}&gt;&gt;     F(F(X))\\
@V{\alpha}VV             @VV{F(\alpha)}V\\
X            @&gt;{i}&gt;&gt;     F(X)
\end{CD}
\]</span></p>
<p>この<span class="math inline">\(i\)</span>が<span class="math inline">\(\alpha^{-1}\)</span>であることを示す.</p>
<p>まず <span class="math inline">\(\alpha \circ i : X \rightarrow X\)</span> を考える.</p>
<p><span class="math display">\[
\require{AMScd}
\begin{CD}
F(X)         @&gt;{F(i)}&gt;&gt;     F(F(X))       @&gt;{F(\alpha)}&gt;&gt; F(X)\\
@VV{\alpha}V             @VV{F(\alpha)}V       @VVV     \\
X            @&gt;{i}&gt;&gt;        F(X)          @&gt;{\alpha}&gt;&gt; X
\end{CD}
\]</span></p>
<p>これは algebra <span class="math inline">\((\alpha,X)\)</span> から <span class="math inline">\((\alpha,X)\)</span> への morphism になる. そのため <span class="math inline">\((\alpha,X)\)</span> が始代数であることから, <span class="math inline">\(\alpha \circ i = id_X\)</span>となる.</p>
<p>次に <span class="math inline">\(i \circ \alpha\)</span> について考えるため,最初の可換図式にもどる. <span class="math display">\[
\require{AMScd}
\begin{CD}
F(X)         @&gt;{F(i)}&gt;&gt;     F(F(X))\\
@V{\alpha}VV             @VV{F(\alpha)}V\\
X            @&gt;{i}&gt;&gt;     F(X)
\end{CD}
\]</span> 上の図が可換なため、 <span class="math inline">\(i \circ \alpha = F(\alpha) \circ F(i)\)</span> である. そのため, <span class="math display">\[
\begin{eqnarray}
i \circ \alpha
&amp; = &amp; F(\alpha) \circ F(i) \\
&amp; = &amp; F(\alpha \circ i) \\
&amp; = &amp; F(id_X) \\
&amp; = &amp; id_{F(X)}
\end{eqnarray}
\]</span></p>
<p>以上より, <span class="math inline">\(i \circ \alpha = id\)</span>, <span class="math inline">\(\alpha \circ i = id\)</span> なので <span class="math inline">\(i = \alpha^{-1}\)</span> が導けた.</p>
<h3 id="自分なりの解釈">自分なりの解釈</h3>
<ul>
<li><span class="math inline">\(F(X) = X\)</span> の解とみなすと, <span class="math inline">\(X\)</span> は <span class="math inline">\(F\)</span> の最小不動点だと思える</li>
<li>始代数が存在するとしたらそのキャリアは最小不動点と一致する（?）</li>
</ul>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Sun, 23 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2015-08-23-Lambek%27s-Theorem.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>Arch Linux を Dell XPS 13(2015)へインストールする</title>
    <link>http://kiripon.net/posts/2015-03-17-install-archlinux-to-xps13.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on March 17, 2015
    
</div>
<div class="info">
  
  Tags: <a href="/tags/Arch%20Linux.html">Arch Linux</a>, <a href="/tags/XPS%2013.html">XPS 13</a>, <a href="/tags/DELL.html">DELL</a>
  
</div>

<h2 id="経緯">経緯</h2>
<p><a href="http://www.dell.com/jp/p/xps-13-9343-laptop/pd">Dell XPS 13</a>を購入した.(とてもうれしい) 早速Arch Linux をインストールすることにしたが、配布されている ISO イメージでは，無線LANが認識されなかった． そのためドライバがインストール済みのISOイメージを作成することにした．</p>
<h2 id="必要なドライバの確認">必要なドライバの確認</h2>
<p><code>lspci</code>コマンドで無線モジュールを確認する。</p>
<pre><code># lspci
...
02:00.0 Network controller: Broadcom Corporation BCM4352 802.11ac Wireless Network Adapter (rev 03)</code></pre>
<p>調べたところ、<code>BCM4352</code>は <a href="https://aur.archlinux.org/packages/broadcom-wl-dkms/">broadcom-wl-dkms(AUR)</a> を利用することで利用できるらしい。こいつを予め導入したインストールイメージをつくる。</p>
<h2 id="isoイメージの作成">ISOイメージの作成</h2>
<p><a href="https://wiki.archlinux.org/index.php/Archiso">Archiso(Arch Wiki)</a>に則って インストールイメージを作成する。 その際に、以下の変更を行った。</p>
<p><code>yaourt</code>を使うため、<code>pacman.conf</code>の末尾に以下を追加</p>
<pre><code>[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/$arch</code></pre>
<p><code>packages.both</code>の末尾に以下を追加</p>
<pre><code>linux-headers
dkms
fakeroot
yaourt</code></pre>
<p><code>airootfs/root/customize_airootfs.sh</code>に以下を追加</p>
<pre><code># root で yaourt が実行できないのでユーザー権限で実行
sudo -u arch yaourt --noconfirm -S broadcom-wl-dkms</code></pre>
<h2 id="install">Install</h2>
<p>UEFI環境でSecure Bootを有効にしたまま起動するとHash Toolが起動する。 その時はArch Wikiの <a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface#Secure_Boot">Unified Extensible Firmware Interface</a> の通りの手順を踏むと起動できる。</p>
<p>これで無線LANが有効になった状態で起動できるので、<code>wifi-menu</code>等で無線LANに繋いで通常のインストール手順をふめばよい。</p>
<h2 id="問題点">問題点</h2>
<p><del>スピーカーから音が出ない。 <a href="https://major.io/2015/02/03/linux-support-dell-xps-13-9343-2015-model/">ここ</a>とかを見る限り、いまのところ根本的な解決はないらしい。続報に期待</del></p>
<p><del><a href="https://github.com/mpalourdio/xps13" class="uri">https://github.com/mpalourdio/xps13</a> を参考にカーネルのブートオプションに<code>acpi_osi=&quot;Windows 2013&quot;</code>を追加し、数回再起動したところスピーカーから音が出るようになった。</del></p>
<p><del>変更後のgummibootのエントリは以下のようになった。</del></p>
<pre><code>title	Arch Linux
linux	/vmlinuz-linux
initrd	/initramfs-linux.img
options	enable_rc6=1 enable_fbc=1 lvds_downclock=1 pcie_aspm=force psmouse.resetafter=0 acpi_osi=&quot;!Windows 2013&quot; root=/dev/sda7 rw</code></pre>
<p><em>5/24追記</em> BIOS A02 以降からは<code>acpi_osi</code> オプションを指定しなくてもスピーカーが有効になるようになった。</p>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Tue, 17 Mar 2015 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2015-03-17-install-archlinux-to-xps13.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>OpenGL in Haskell</title>
    <link>http://kiripon.net/posts/2014-12-04-opengl-in-haskell.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on December  4, 2014
    
</div>
<div class="info">
  
  Tags: <a href="/tags/OpenGL.html">OpenGL</a>, <a href="/tags/Haskell.html">Haskell</a>, <a href="/tags/GLFW.html">GLFW</a>
  
</div>

<p>haskellでOpenGLを使って何かしたい、と思って <a href="http://www.opengl-tutorial.org/">opengl-tutorial.org</a>を参考にhaddockを眺めながら書きました。haskellのOpenGLは、生のOpenGLと微妙に違うAPIを持っているので調べるのはかなりかったるかった。</p>
<p>ともあれ、赤い三角形はようやく表示できたので記念にソースコードを貼り付けておきます。</p>
<p>使用しているパッケージはGLFW-bではなくGLFWです。GLFW-bのほうはglfw3に対応しているようなので気が向いたら書きなおすことにしよう</p>
<p><em>Main.hs</em></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE NoMonomorphismRestriction #-}</span>
<span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import           </span><span class="dt">Control.Monad</span>
<span class="kw">import           </span><span class="dt">Data.Array.Storable</span>       (newListArray, withStorableArray)
<span class="kw">import qualified</span> <span class="dt">Data.ByteString</span>           <span class="kw">as</span> <span class="dt">S8</span>
<span class="kw">import           </span><span class="dt">Foreign.Ptr</span>               (nullPtr)
<span class="kw">import           </span><span class="dt">Foreign.Storable</span>          (sizeOf)
<span class="kw">import           </span><span class="dt">Graphics.Rendering.OpenGL</span> (<span class="dt">BufferObject</span>, <span class="dt">Color4</span> (..), <span class="dt">GLfloat</span>,
                                            <span class="dt">VertexArrayObject</span>, get, (<span class="fu">$=</span>))
<span class="kw">import qualified</span> <span class="dt">Graphics.Rendering.OpenGL</span> <span class="kw">as</span> <span class="dt">GL</span>
<span class="kw">import qualified</span> <span class="dt">Graphics.UI.GLFW</span>          <span class="kw">as</span> <span class="dt">GLFW</span>
<span class="kw">import           </span><span class="dt">System.Exit</span>               (exitSuccess)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;initialize..&quot;</span>
  initialize
  putStrLn <span class="st">&quot; done&quot;</span>
  print <span class="st">&quot;begin loop&quot;</span>
  mainLoop
  print <span class="st">&quot;end loop&quot;</span>
  GLFW.closeWindow
  GLFW.terminate
  <span class="kw">where</span>
    initialize <span class="fu">=</span> <span class="kw">do</span>
      GLFW.initialize <span class="fu">&gt;&gt;=</span> unless <span class="ot">`flip`</span> GLFW.terminate


      GLFW.openWindowHint <span class="dt">GLFW.FSAASamples</span> <span class="dv">4</span>
      GLFW.openWindowHint <span class="dt">GLFW.OpenGLVersionMajor</span> <span class="dv">3</span>
      GLFW.openWindowHint <span class="dt">GLFW.OpenGLVersionMinor</span> <span class="dv">2</span> <span class="co">-- 3はだめ？</span>
      GLFW.openWindowHint <span class="dt">GLFW.OpenGLForwardCompat</span> <span class="dt">True</span>

      GLFW.openWindowHint <span class="dt">GLFW.OpenGLProfile</span> <span class="dt">GLFW.OpenGLCoreProfile</span>

      GLFW.windowTitle <span class="fu">$=</span> <span class="st">&quot;GLFW Demo&quot;</span>
      wRes <span class="ot">&lt;-</span> GLFW.openWindow (<span class="dt">GL.Size</span> <span class="dv">400</span> <span class="dv">400</span>)
              []
              <span class="dt">GLFW.Window</span>
      unless wRes <span class="fu">$</span> <span class="kw">do</span>{
        putStrLn <span class="st">&quot;failed to open window&quot;</span>;
        GLFW.terminate;
        System.Exit.exitSuccess;}

      print <span class="st">&quot;hgoe&quot;</span>
      vGL <span class="ot">&lt;-</span> GL.get GL.glVersion
      putStrLn <span class="fu">$</span> <span class="st">&quot;OpenGL version:&quot;</span> <span class="fu">++</span> show vGL
      vGLFW <span class="ot">&lt;-</span> GL.get GLFW.version
      putStrLn <span class="fu">$</span> <span class="st">&quot;GLFW version:&quot;</span> <span class="fu">++</span> show vGLFW


      GL.shadeModel            <span class="fu">$=</span> <span class="dt">GL.Smooth</span>
      GL.lineSmooth            <span class="fu">$=</span> <span class="dt">GL.Enabled</span>
      GL.blend                 <span class="fu">$=</span> <span class="dt">GL.Enabled</span>
      GL.blendFunc             <span class="fu">$=</span> (<span class="dt">GL.SrcAlpha</span>,<span class="dt">GL.OneMinusSrcAlpha</span>)
      GL.clearColor            <span class="fu">$=</span> <span class="dt">Color4</span> <span class="dv">0</span> <span class="fl">0.5</span> <span class="fl">0.5</span> <span class="dv">0</span>
      GLFW.windowSizeCallback  <span class="fu">$=</span> \size<span class="fu">@</span>(<span class="dt">GL.Size</span> w h) <span class="ot">-&gt;</span> <span class="kw">do</span>{
          putStrLn <span class="st">&quot;callback: windowResizeCallback&quot;</span>;
          GL.viewport   <span class="fu">$=</span> (<span class="dt">GL.Position</span> <span class="dv">0</span> <span class="dv">0</span>,size);
          GL.matrixMode <span class="fu">$=</span> <span class="dt">GL.Projection</span>;
          GL.loadIdentity;
          GL.ortho2D <span class="dv">0</span> (realToFrac w) (realToFrac h) <span class="dv">0</span>;
          }
      GLFW.windowCloseCallback <span class="fu">$=</span> <span class="kw">do</span>{
          putStrLn <span class="st">&quot;callback: windowCloseCallback&quot;</span>;
          GLFW.closeWindow;
          GLFW.terminate;
          exitSuccess;}

<span class="ot">vertices ::</span> [<span class="dt">GLfloat</span>]
vertices <span class="fu">=</span> [<span class="fu">-</span><span class="fl">1.0</span>, <span class="fu">-</span><span class="fl">1.0</span>, <span class="fl">0.0</span>
           ,<span class="fl">1.0</span>, <span class="fu">-</span><span class="fl">1.0</span>, <span class="fl">0.0</span>
           ,<span class="fl">0.0</span>, <span class="fl">1.0</span>, <span class="fl">0.0</span>]


<span class="ot">createVBO ::</span> [<span class="dt">GLfloat</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">BufferObject</span>
createVBO elems <span class="fu">=</span> <span class="kw">do</span>
  [vertexBuffer] <span class="ot">&lt;-</span> GL.genObjectNames <span class="dv">1</span>
  GL.bindBuffer <span class="dt">GL.ArrayBuffer</span> <span class="fu">$=</span> <span class="dt">Just</span> vertexBuffer
  arr <span class="ot">&lt;-</span> newListArray (<span class="dv">0</span>,len<span class="fu">-</span><span class="dv">1</span>)elems
  <span class="kw">let</span> bufSize <span class="fu">=</span> toEnum <span class="fu">$</span> len <span class="fu">*</span> sizeOf (head elems)
  withStorableArray arr <span class="fu">$</span> \ptr <span class="ot">-&gt;</span>
    GL.bufferData <span class="dt">GL.ArrayBuffer</span> <span class="fu">$=</span> (bufSize,ptr,<span class="dt">GL.StaticDraw</span>)
  putStrLn <span class="st">&quot;array buffered&quot;</span>
  GL.bindBuffer <span class="dt">GL.ArrayBuffer</span> <span class="fu">$=</span> <span class="dt">Nothing</span> <span class="co">-- なくてもいい？</span>
  print <span class="st">&quot;buffer binded&quot;</span>
  return vertexBuffer
  <span class="kw">where</span>
    len <span class="fu">=</span> length elems

<span class="ot">mainLoop ::</span> <span class="dt">IO</span> ()
mainLoop <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">--GL.arrayPointer GL.</span>
  <span class="co">--glGenVertexArrays(&amp;vao)</span>
  [vertexArrayId] <span class="ot">&lt;-</span> GL.genObjectNames <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">IO</span> [<span class="dt">VertexArrayObject</span>]
  <span class="co">--glBindVertexArray(vao)</span>
  GL.bindVertexArrayObject <span class="fu">$=</span> <span class="dt">Just</span> vertexArrayId

  vbo <span class="ot">&lt;-</span> createVBO vertices

  program <span class="ot">&lt;-</span> loadShaders <span class="st">&quot;./vertexShader.glsl&quot;</span> <span class="st">&quot;./fragmentShader.glsl&quot;</span>
  GL.currentProgram <span class="fu">$=</span> <span class="dt">Just</span> program

  pState <span class="ot">&lt;-</span> get <span class="fu">$</span> GL.validateStatus program
  unless pState <span class="fu">$</span> putStrLn <span class="st">&quot;Shader validate Failed&quot;</span>

  loop vbo vertexArrayId
  return ()
  <span class="kw">where</span>
    loop vertexBuffer vao <span class="fu">=</span> <span class="kw">do</span>
      draw vertexBuffer vao
      GLFW.pollEvents
      GLFW.swapBuffers
      p <span class="ot">&lt;-</span> GLFW.getKey <span class="dt">GLFW.ESC</span>
      unless (p <span class="fu">==</span> <span class="dt">GLFW.Press</span>) <span class="fu">$</span> <span class="kw">do</span>
        GLFW.sleep <span class="fl">0.001</span>
        loop vertexBuffer vao


<span class="ot">draw ::</span> <span class="dt">BufferObject</span> <span class="ot">-&gt;</span> <span class="dt">VertexArrayObject</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
draw vertexBuffer vao <span class="fu">=</span> <span class="kw">do</span>
  GL.clear [<span class="dt">GL.ColorBuffer</span>,<span class="dt">GL.DepthBuffer</span>]

  <span class="co">--glDrawArraysを書く</span>
  GL.vertexAttribArray (<span class="dt">GL.AttribLocation</span> <span class="dv">0</span>) <span class="fu">$=</span> <span class="dt">GL.Enabled</span>
  GL.bindBuffer <span class="dt">GL.ArrayBuffer</span>               <span class="fu">$=</span> <span class="dt">Just</span> vertexBuffer
  GL.bindVertexArrayObject <span class="fu">$=</span> <span class="dt">Just</span> vao
  GL.vertexAttribPointer (<span class="dt">GL.AttribLocation</span> <span class="dv">0</span>)<span class="fu">$=</span> (<span class="dt">GL.ToFloat</span>,descriptor)
  GL.drawArrays <span class="dt">GL.Triangles</span> <span class="dv">0</span> <span class="dv">3</span>
  GL.bindBuffer <span class="dt">GL.ArrayBuffer</span> <span class="fu">$=</span> <span class="dt">Nothing</span>
  GL.vertexAttribArray (<span class="dt">GL.AttribLocation</span> <span class="dv">0</span>) <span class="fu">$=</span> <span class="dt">GL.Disabled</span>

  GL.flush
  <span class="kw">where</span>
    descriptor<span class="fu">=</span> <span class="dt">GL.VertexArrayDescriptor</span> <span class="dv">3</span> <span class="dt">GL.Float</span> <span class="dv">0</span> nullPtr
<span class="ot">      ::</span> <span class="dt">GL.VertexArrayDescriptor</span> <span class="dt">GLfloat</span>

<span class="ot">loadShaders ::</span> FilePath <span class="ot">-&gt;</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GL.Program</span>
loadShaders vertexFilePath fragmentFilePath <span class="fu">=</span> <span class="kw">do</span>

  vertexShaderId   <span class="ot">&lt;-</span> GL.createShader <span class="dt">GL.VertexShader</span>
  vShaderData <span class="ot">&lt;-</span> S8.readFile vertexFilePath
  putStrLn <span class="fu">$</span> <span class="st">&quot;compilingShader : &quot;</span> <span class="fu">++</span> vertexFilePath
  GL.shaderSourceBS vertexShaderId <span class="fu">$=</span> vShaderData
  GL.compileShader vertexShaderId

  vShaderLog <span class="ot">&lt;-</span> get <span class="fu">$</span> GL.shaderInfoLog vertexShaderId
  putStrLn vShaderLog

  fragmentShaderId <span class="ot">&lt;-</span> GL.createShader <span class="dt">GL.FragmentShader</span>
  fShaderData <span class="ot">&lt;-</span> S8.readFile fragmentFilePath
  putStrLn <span class="fu">$</span> <span class="st">&quot;compilingShader : &quot;</span> <span class="fu">++</span> fragmentFilePath
  GL.shaderSourceBS fragmentShaderId <span class="fu">$=</span> fShaderData
  GL.compileShader fragmentShaderId
  fShaderLog <span class="ot">&lt;-</span> get <span class="fu">$</span> GL.shaderInfoLog fragmentShaderId
  putStrLn <span class="fu">$</span> <span class="st">&quot;shader log :\n&quot;</span> <span class="fu">++</span> fShaderLog

  <span class="co">--link Program</span>
  putStrLn <span class="st">&quot;Linking Shader Program&quot;</span>
  programId <span class="ot">&lt;-</span> GL.createProgram
  GL.attachShader prattachShader programId vertexShaderId
  GL.ogramId vertexShaderId
  GL.attachShader programId fragmentShaderId
  GL.linkProgram programId

  <span class="co">--check program</span>
  programLog <span class="ot">&lt;-</span> get <span class="fu">$</span> GL.programInfoLog programId
  putStrLn <span class="fu">$</span> <span class="st">&quot;program link log :\n&quot;</span> <span class="fu">++</span> programLog

  GL.deleteObjectName vertexShaderId
  GL.deleteObjectName fragmentShaderId
  return programId</code></pre></div>
<p><em>vertexShader.glsl</em></p>
<div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="ot">#version 330 core</span>

<span class="fu">layout</span>(location = <span class="dv">0</span>) <span class="dt">in</span> <span class="dt">vec3</span> vertexPosition_modelspace;

<span class="dt">void</span> <span class="fu">main</span>(){
  <span class="fu">gl_Position</span>.<span class="fu">xyz</span> = vertexPosition_modelspace;
  <span class="fu">gl_Position</span>.<span class="fu">w</span>   = <span class="fl">1.0</span>;
}</code></pre></div>
<p><em>fragmentShader.glsl</em></p>
<div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="ot">#version 330 core</span>
<span class="dt">out</span> <span class="dt">vec3</span> color;

<span class="dt">void</span> <span class="fu">main</span>(){
  color = <span class="dt">vec3</span>(<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">0</span>);
}</code></pre></div>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Thu, 04 Dec 2014 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2014-12-04-opengl-in-haskell.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>圏論のノート2:Functor</title>
    <link>http://kiripon.net/posts/2014-10-29-Category-Functor.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on October 29, 2014
    
</div>
<div class="info">
  
  Tags: <a href="/tags/Haskell.html">Haskell</a>, <a href="/tags/Catoegory.html">Catoegory</a>, <a href="/tags/%E5%9C%8F%E8%AB%96.html">圏論</a>
  
</div>

<div>

</div>
<!--

> {-# LANGUAGE MultiParamTypeClasses ,TypeFamilies,FlexibleInstances#-}
> module CategoryFunctor where
> import Prelude()

-->
<p>Haskellではもっぱらコンテナを表すのに使われるFunctorについて。</p>
<h2 id="定義functor">定義:Functor</h2>
<p><span class="math inline">\(C\)</span>と<span class="math inline">\(D\)</span>を圏とする。 <span class="math inline">\(F:C \rightarrow D\)</span>について,以下を満たす/表す時,Fを<strong>関手(functor)</strong>と呼ぶ.</p>
<ol type="1">
<li>圏Cのobject <span class="math inline">\(A\)</span> から圏Dのobject <span class="math inline">\(B\)</span> への対応 <span class="math inline">\(F:A \rightarrow F(A)\)</span></li>
<li>圏Cの射 <span class="math inline">\(f:A \rightarrow B\)</span> から圏Dの射 <span class="math inline">\(F(f):F(A) \rightarrow F(B)\)</span>への対応</li>
<li>任意のCのobject <span class="math inline">\(A\)</span>とCのarrow <span class="math inline">\(f\)</span>,<span class="math inline">\(g\)</span>について
<ul>
<li><span class="math inline">\(F(id_A) = id_{F(A)}\)</span></li>
<li><span class="math inline">\(F(g \circ f) = F(g) \circ F(f)\)</span></li>
</ul></li>
</ol>
<h3 id="例haskellのfunctor">例:HaskellのFunctor</h3>
<p>haskellの圏Haskでは、型がobject,関数がarrowである。 Functor型クラスを見てみる。</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span></code></pre></div>
<p>型<code>a</code>から型<code>f a</code>を構成するので,<code>f</code>がobjectの対応をとるものである。また、</p>
<div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;   fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</code></pre></div>
<p>は、型<code>(a -&gt; b)</code>から型<code>(f a -&gt; f b)</code>を構築する。これがarrowの対応になっている。 結合則は表現できないので、プログラマが保証しなければならない。</p>
<h3 id="例忘却関手forgetful-functor">例:忘却関手(forgetful functor)</h3>
<p>モノイド<span class="math inline">\((M,\bullet,e)\)</span>は、Mの要素をarrowとする唯一のobjectを持つ圏になる。 このモノイド圏から集合の圏への対応を考える。<br />
モノイド<span class="math inline">\((M,\bullet ,e)\)</span>に集合<span class="math inline">\(M\)</span>を対応させ、 モノイド準同型 <span class="math inline">\(h:(M, \bullet ,e) \rightarrow (M', \bullet' ,e')\)</span> を、写像 <span class="math inline">\(h:M \rightarrow M'\)</span> に対応させると,<span class="math inline">\(F:Mon \rightarrow Set\)</span>は関手になる。</p>
<p><strong>疑問</strong><br />
Functor型クラスだけではHask上のすべてのFunctorを表現できていないように見えた<br />
たとえば,関手Fについて、型の対応を<code>F(a) = a</code>,関数の対応を<code>F(f) -&gt; f</code>とすればこれも関手になる。<br />
Functor型クラスは特定の種類の関手についてだけについて言及しているのかもしれない。 誰か詳しい人に教えてもらいたいです。</p>
<p>11/29追記 isomorphismを介して一意に定まるから、<code>F = Identity</code>としていい(?)</p>
<h3 id="参考文献">参考文献</h3>
<ul>
<li><a href="http://www.math.nagoya-u.ac.jp/~hasimoto/paper/class/cat10.pdf">圏と関手入門</a></li>
<li><a href="http://mitpress.mit.edu/books/basic-category-theory-computer-scientists">Basic Category Theory for Computer Scientists</a></li>
<li><a href="http://ja.wikibooks.org/wiki/Haskell/%E5%9C%8F%E8%AB%96">Wikibooks:Haskell/圏論</a></li>
</ul>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Wed, 29 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2014-10-29-Category-Functor.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>圏論のノート1</title>
    <link>http://kiripon.net/posts/2014-10-19-Category1.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on October 19, 2014
    
</div>
<div class="info">
  
  Tags: <a href="/tags/Category.html">Category</a>
  
</div>

<h2 id="定義-圏">定義: 圏</h2>
<p>圏<span class="math inline">\(C\)</span> は以下の要素からなる</p>
<ol type="1">
<li>object(対象) の集まり</li>
<li>arrow(射) の集まり(morphismとも呼ばれる)</li>
<li>arrow <span class="math inline">\(f\)</span> にdomainとcodomainを割り当てる操作.
<ul>
<li><span class="math inline">\(dom\ f = A\)</span>かつ<span class="math inline">\(cod\ f = B\)</span>のとき、<span class="math inline">\(f : A \rightarrow B\)</span>と書く。</li>
<li><span class="math inline">\(dom\ f = A\)</span>かつ<span class="math inline">\(cod\ f = B\)</span>なるarrow <span class="math inline">\(f\)</span> の集まりを <span class="math inline">\(C(A,B)\)</span>と書く。</li>
</ul></li>
<li>合成<span class="math inline">\((\circ)\)</span>
<ul>
<li><span class="math inline">\(dom\ f = cod\ g\)</span>なるf,gについて、合成射(composite arrow) <span class="math inline">\(f \circ g\)</span>を作る.</li>
<li>以下の関係則(associative raw)を満たさなければならない
<ul>
<li><span class="math inline">\((f \circ g) \circ h = f \circ (g \circ h)\)</span></li>
</ul></li>
</ul></li>
<li>すべてのobject Aについて<span class="math inline">\(id_A : A \rightarrow A\)</span>は以下を満たす
<ul>
<li><span class="math inline">\(id_B \circ f = f \circ id_B = f \ (where\ f : A \rightarrow B)\)</span></li>
</ul></li>
</ol>
<h3 id="例-集合">例: 集合</h3>
<p>集合をObject,集合間の全域関数をarrowとみなせば圏になる.<br />
ただし、 <span class="math inline">\(f : x \mapsto x^2\)</span> のような関数を考えると、fは<br />
<span class="math inline">\(f : \mathbb{R} \rightarrow \mathbb{R}\)</span> とも <span class="math inline">\(f : \mathbb{R} \rightarrow \mathbb{R}^2\)</span> とも解釈できてしまう</p>
<p>これを避けるために 射<span class="math inline">\(f : \mathbb{A} \rightarrow \mathbb{B}\)</span> を<span class="math inline">\((f,\mathbb{B})\)</span>と書くこともある。</p>
<h3 id="例-poset">例: Poset</h3>
<ul>
<li>Object… <span class="math inline">\((P,\le_P)\)</span>の組(集合P:半順序<span class="math inline">\(\le_P\)</span>を持つ)</li>
<li>Arrow … <span class="math inline">\(f:(P,\le_P) \rightarrow (Q,\le_Q)\)</span>. ただし <span class="math inline">\(p \le_P p'\)</span> のとき<span class="math inline">\(f(p) \le_P f(p')\)</span></li>
</ul>
<h2 id="定義-diagram">定義: Diagram</h2>
<p>圏CのDiagramは、CのObjectとArrowで正しくラベル付けされた辺と頂点の集まりの事を言う。<br />
ここでいう“正しく”とは、<span class="math inline">\(f : A \rightarrow B\)</span>をラベルとして持つ辺があった時、その始点はAであり終点はBである事を言う。</p>
<h2 id="定義-可換">定義: 可換</h2>
<p>圏CのDiagragramが可換(commute)とは、任意の頂点のペア<span class="math inline">\(X,Y\)</span>について,<span class="math inline">\(X\)</span>から<span class="math inline">\(Y\)</span>への経路すべてが等しい事を言う。つまり<span class="math inline">\(X\)</span>から<span class="math inline">\(Y\)</span>への各経路がarrowを定め、それら圏Cにおいて等しいことをいう。</p>
<h3 id="参考文献">参考文献</h3>
<ul>
<li><a href="http://mitpress.mit.edu/books/basic-category-theory-computer-scientists">Basic Category Theory for Computer Scientists</a></li>
</ul>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Sun, 19 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2014-10-19-Category1.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>Type safe Formatting</title>
    <link>http://kiripon.net/posts/2014-10-05-Type-safe-formatting.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on October  5, 2014
    
</div>
<div class="info">
  
  Tags: <a href="/tags/Haskell.html">Haskell</a>, <a href="/tags/DSL.html">DSL</a>, <a href="/tags/GADT.html">GADT</a>
  
</div>

<h3 id="めも">めも</h3>
<p><a href="http://okmij.org/ftp/typed-formatting/">Type-safe functional formatted IO</a> を読んだ際のメモ.型でラムダ式っぽい事ができるのは便利。gadtの証人の型を作るのに役立ちそう</p>
<h3 id="要約">要約</h3>
<p>printfやscanfのフォーマット文字列を実装する。OCamlのprintfのような特殊な型付をせず type safe なインターフェースを実装したい。 フォーマット文字列から型付けを行うのは無理なので(Template Haskellで頑張れば話は別)、DSLとして実装して適切な型がつくようにする。</p>
<p>最終的に次のように書けるようになる.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> hoge <span class="fu">=</span> lit <span class="st">&quot;PiyoPiyo &quot;</span> <span class="fu">^</span> char <span class="fu">^</span> lit <span class="st">&quot; fuga&quot;</span> <span class="fu">^</span> int
result  <span class="fu">=</span> sprintf hoge <span class="ch">'a'</span> <span class="dv">100</span>
<span class="co">-- result == &quot;PiyoPiyo a 100&quot;</span>
<span class="co">{-</span>
<span class="co">bad_result = sprintf hoge 300 'a'</span>
<span class="co">-- これは型エラー</span>
<span class="co">-}</span></code></pre></div>
<h3 id="the-initial-view">the initial view</h3>
<p>データ型<code>F a b</code>を考える。ここで、<code>F</code>は<code>F :: * -&gt; * -&gt; *</code>、つまり2引数の型コンストラクタ。 ここで型変数<code>b</code>は型変数<code>a</code>の1回以上の出現を含む型だとすると、Fは型レベルのラムダ式とみなせる。 この関数に引数を適用するにはFの第1引数<code>a</code>を適用したい型<code>x</code>でunifyしてやればよい。 すると<code>b</code>の中の<code>a</code>の出現が<code>x</code>で置き換えられ,関数適用の結果になる。 これはPrologでのラムダ式の挙動をエミュレートしているらしい。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- F a b を型での関数抽象,つまり(λa. b)とみなす</span>
<span class="co">-- 型レベルid</span>
x <span class="fu">=</span> lit <span class="st">&quot;hoge&quot;</span><span class="ot"> ::</span> <span class="dt">F</span> a a

<span class="co">-- a の先頭に(Int -&gt;)を付け加える演算</span>
y <span class="fu">=</span> int <span class="dv">10</span><span class="ot">     ::</span> <span class="dt">F</span> a (<span class="dt">Int</span> <span class="ot">-&gt;</span> a)

<span class="co">-- a の先頭に(Char -&gt;)を付け加える演算</span>
z <span class="fu">=</span> char <span class="ch">'c'</span><span class="ot">   ::</span> <span class="dt">F</span> a (<span class="dt">Char</span> <span class="ot">-&gt;</span> a)

<span class="co">-- &quot;p ^ q&quot; はpの型関数にqの型関数を適用することを表す。ラムダ式でいう簡約</span>
<span class="ot">(^) ::</span> <span class="dt">F</span> b c <span class="ot">-&gt;</span> <span class="dt">F</span> a b <span class="ot">-&gt;</span> <span class="dt">F</span> a c

<span class="co">-- このとき、x^yとy^zはそれぞれ次のような型になる。</span>
x <span class="fu">^</span><span class="ot"> y ::</span> <span class="dt">F</span> a (<span class="dt">Int</span> <span class="ot">-&gt;</span> a)
y <span class="fu">^</span><span class="ot"> z ::</span> <span class="dt">F</span> a (<span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Char</span> <span class="ot">-&gt;</span> a))</code></pre></div>
<h3 id="型が決まるまでの流れ記法は適当">型が決まるまでの流れ(記法は適当)</h3>
<pre><code>x ^ y ::
(F b c -&gt; F a b -&gt; F a c) (F a a) (F a (Int -&gt; a))
= (\@b1 @c1 =&gt; (F a1 b1) -&gt; F a1 c1) @a @a (F a (Int -&gt; a))
= ((F a1 a) -&gt; (F a1 a)) (F a (Int -&gt; a))
= \@k1 @k2 -&gt; (F k1 k2) $ @a @(Int-&gt;a)
= F a (Int -&gt; a)</code></pre>
<pre><code>y^z :: (F b c -&gt; F a b -&gt; F a c) (F a (Char -&gt; a)) (F a (Int -&gt; a))
= \@t1 @t2 =&gt; (F a1 t1 -&gt; F a1 t2) @a @(Char -&gt; a) (F a (Int -&gt; a))
= (F a1 a -&gt; F a1 (Char -&gt; a)) (F a (Int -&gt; a))
= \@t1 @t2 =&gt; (F t1 (Char -&gt; t2)) @a @(Int -&gt; a)
= F a (Char -&gt; Int -&gt; a)</code></pre>
<h3 id="final-view">final view</h3>
<p>initial viewの双対(数学的な意味での双対じゃないっぽい？)。 initial viewではデータ型として宣言していたEDSLだったが、ここでは関数として書いている。 ユーザーからは与えられたコンビネータを使っている限り違いを意識できない。 こっちはデータ型を作らないでその場で結果を構築する。</p>
<p>Initial viewからFinal viewは自動変換が可能らしい。</p>
<h3 id="その他">その他</h3>
<p>Template haskellであれこれしたり、といった話が続く。</p>
<h3 id="あとで読みたい">あとで読みたい</h3>
<ul>
<li><a href="http://www.brics.dk/RS/98/12/BRICS-RS-98-12.pdf">Functional unparsing</a></li>
<li><a href="http://pllab.is.ocha.ac.jp/~asai/papers/tr08-2.pdf">On Typing Delimited Continuations:Three New Solutions to the Printf Problem</a></li>
<li><a href="http://www.cs.ox.ac.uk/ralf.hinze/publications/Format.ps.gz">Formatting: a class act</a></li>
</ul>
<h3 id="参考にしたもの">参考にしたもの</h3>
<ul>
<li><a href="http://www.math.nagoya-u.ac.jp/~garrigue/papers/mlmt.pdf">More Logic More Types</a></li>
</ul>
<h3 id="メモ">メモ</h3>
<ul>
<li>sprintf は polyvariadic .. 任意の個数の任意の型を持った引数をとれる。</li>
<li>sscanf は partial function .. 引数によっては結果が無い関数になる</li>
</ul>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Sun, 05 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2014-10-05-Type-safe-formatting.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>Github pages に移動しました</title>
    <link>http://kiripon.net/posts/2014-09-27-Github-pages.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on September 27, 2014
    
</div>
<div class="info">
  
  Tags: <a href="/tags/GithubPages.html">GithubPages</a>
  
</div>

<p>試験的にブログをGithub pagesで管理することにしました。 試行錯誤中です。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- test input</span>
main <span class="fu">=</span> <span class="kw">do</span>
  x <span class="ot">&lt;-</span> getLine
  putStrLn <span class="fu">$</span> x <span class="fu">++</span> <span class="st">&quot;hogehoge&quot;</span>

piyo n <span class="fu">=</span> foldr (<span class="fu">*</span>) <span class="dv">1</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">20</span>]</code></pre></div>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Sat, 27 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2014-09-27-Github-pages.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>
<item>
    <title>ICPCの罪状</title>
    <link>http://kiripon.net/posts/2014-07-14-guilt-icpc.html</link>
    <description><![CDATA[<link rel="stylesheet" type="text/css" href="/css/syntax.css" />
<div class="info">
    Posted on July 14, 2014
    
</div>
<div class="info">
  
  Tags: <a href="/tags/C%2B%2B.html">C++</a>, <a href="/tags/Algorithm.html">Algorithm</a>, <a href="/tags/ICPC.html">ICPC</a>
  
</div>

<p>今年もicpcに参加しました。 去年よりも解いた問題数は増えたものの、僕が書いたBがバグってて同期にデバッグの手間を取らせたり、Eの解法が思いついたもののコードをバグらせて時間内にACできなかったりと今回も罪人となってしまいました。</p>
<p>Eはバグらせたくなかったので実装が楽なワーシャルフロイドをつかってグラフの直径を求めたのですがしょうもないミスをしてしまいました。</p>
<h3 id="eのコード">Eのコード</h3>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#include&lt;iostream&gt;</span>
<span class="ot">#include&lt;climits&gt;</span>
<span class="kw">using</span> <span class="kw">namespace</span> std;
<span class="dt">const</span> <span class="dt">int</span> maxv = <span class="dv">1000</span>;
<span class="dt">int</span> p[maxv];
<span class="dt">int</span> d[maxv];
<span class="dt">int</span> deg[maxv];
<span class="dt">int</span> g[maxv][maxv];

<span class="dt">int</span> n;
<span class="dt">const</span> <span class="dt">int</span> INF = INT_MAX/<span class="dv">2</span>;
<span class="dt">void</span> mkGraph(){
  fill(*g,g[maxv],INF);
  <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">1</span>;i &lt;= n;i++)g[i][i] = <span class="dv">0</span>; <span class="co">// &lt;- ここを本番で書き忘れてた</span>
  <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">2</span>;i &lt;= n;i++){
    <span class="co">//cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; p[i] &lt;&lt; endl;</span>
    <span class="kw">if</span>(deg[i] == <span class="dv">1</span> <span class="kw">or</span> deg[p[i]] == <span class="dv">1</span>)<span class="kw">continue</span>;
    <span class="dt">int</span> from = i,to = p[i];

    g[from][to] = g[to][from] = d[i];
  }
}

<span class="dt">void</span> outgraph(){
  <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">1</span>;i &lt;= n;i++){
    <span class="kw">for</span>(<span class="dt">int</span> j = <span class="dv">1</span>;j &lt;= n;j++){
      cout &lt;&lt; g[i][j] &lt;&lt; <span class="st">' '</span>;
    }
    cout &lt;&lt; endl;
  }
}

<span class="dt">int</span> radius(){
  mkGraph();
  <span class="co">//outgraph();</span>
  <span class="kw">for</span>(<span class="dt">int</span> k = <span class="dv">1</span>;k &lt;= n;k++){
    <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">1</span>;i &lt;= n;i++){
      <span class="kw">for</span>(<span class="dt">int</span> j = <span class="dv">1</span>;j &lt;= n;j++){
	g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
      }
    }
  }
  
  <span class="dt">int</span> ret = <span class="dv">-1</span>;
  <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">1</span>;i &lt;= n;i++){
    <span class="kw">for</span>(<span class="dt">int</span> j = <span class="dv">1</span>;j &lt;= n;j++){
      <span class="kw">if</span> (g[i][j] == INF)<span class="kw">continue</span>;
      ret = max(g[i][j],ret);
    }
  }
  <span class="co">//cout &lt;&lt; &quot;rad:&quot; &lt;&lt; ret &lt;&lt; endl;</span>
  <span class="kw">return</span> ret;
}

<span class="dt">int</span> weight(){
  <span class="dt">int</span> ret = <span class="dv">0</span>;
  <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">2</span>;i &lt;= n;i++){
    ret += d[i];
  }
  <span class="co">//cout &lt;&lt; &quot;weight:&quot;&lt;&lt;ret &lt;&lt; endl;</span>
  <span class="kw">return</span> ret;
}

<span class="dt">int</span> main(){
  <span class="kw">while</span>(<span class="kw">true</span>){
    cin &gt;&gt; n;
    <span class="kw">if</span>(n == <span class="dv">0</span>)<span class="kw">break</span>;
    
    <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">2</span>;i &lt;= n;i++){
      cin &gt;&gt; p[i];
    }
    <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">2</span>;i &lt;= n;i++){
      cin &gt;&gt; d[i];
    }
    fill(deg,deg+maxv,<span class="dv">0</span>);
  
    <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">2</span>;i &lt;= n;i++){
      deg[ p[i] ] += <span class="dv">1</span>;
      deg[ i    ] += <span class="dv">1</span>;
    }
  
    <span class="dt">int</span> result = <span class="dv">0</span>;
    <span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">1</span>;i &lt;= n;i++){
      <span class="kw">if</span>(deg[i] == <span class="dv">1</span> <span class="kw">or</span> deg[p[i]] == <span class="dv">1</span>)<span class="kw">continue</span>;
      result += d[i] * <span class="dv">2</span>;
    }
    <span class="co">//cout &lt;&lt; &quot;junkai:&quot; &lt;&lt; result &lt;&lt; endl;</span>
    result -= radius();
    <span class="co">//outgraph();</span>
    result += weight();
    cout &lt;&lt; result &lt;&lt; endl;
  }
  <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<p>Eはワーシャルフロイドのグラフの対角成分の初期化を忘れていたために起こっていたバグです。本当にしょうもないバグでした。</p>

<br>

<div id="disqus_thread"><div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  // required: replace example with your forum shortname
  var disqus_shortname = 'kiripon';
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script>
]]></description>
    <pubDate>Mon, 14 Jul 2014 00:00:00 UT</pubDate>
    <guid>http://kiripon.net/posts/2014-07-14-guilt-icpc.html</guid>
    <dc:creator>Kiripon</dc:creator>
</item>

    </channel>
</rss>
